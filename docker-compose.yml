version: '3.8'

services:
  react-app:
    build:
      context: ./my-app  # React 프로젝트 폴더 경로
      dockerfile: Dockerfile
    ports:
      - "3000:3000"  # 호스트의 3000 포트를 컨테이너의 3000 포트에 매핑
    depends_on:
      - backend
    networks:
      - app-network
    container_name: frontend

  backend:
    build:
      context: ./demo  # Spring Boot 프로젝트 폴더 경로
      dockerfile: Dockerfile
    ports:
      - "8080:8080"  # 호스트의 8080 포트를 컨테이너의 8080 포트에 매핑
    depends_on:
      - db
    environment:
      SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/teammanding  # MySQL 데이터베이스 URL
      SPRING_DATASOURCE_USERNAME: root  # MySQL 사용자 이름
      SPRING_DATASOURCE_PASSWORD: 1234  # MySQL 비밀번호
    #volumes:
    #  - ./images:/app/images
    networks:
      - app-network
    container_name: backend

  db:
    image: mysql:8  # MySQL 8 이미지를 사용
    environment:
      MYSQL_ROOT_PASSWORD: 1234  # MySQL 루트 비밀번호
      MYSQL_DATABASE: teammanding  # 기본 데이터베이스 이름
    ports:
      - "3306:3306"  # 호스트의 3306 포트를 컨테이너의 3306 포트에 매핑
    networks:
      - app-network
    volumes:
      - db_data:/var/lib/mysql  # 데이터 영속성을 위한 볼륨
    container_name: database

  socket-server:
    build:
      context: ./my-app  # 소켓 서버를 위한 빌드 컨텍스트
      dockerfile: src/components/Dockerfile  # Dockerfile 경로
    ports:
      - "4000:4000"  # 호스트의 4000 포트를 컨테이너의 4000 포트에 매핑
    networks:
      - app-network
    container_name: socket-server







networks:
  app-network:  # 앱 네트워크 정의

volumes:
  db_data:  # 데이터 볼륨 정의
